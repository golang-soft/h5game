// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: share.proto

package gameproto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//错误类型
type ErrorCode int32

const (
	OK            ErrorCode = 0
	Fail          ErrorCode = 1
	Error         ErrorCode = 2
	ServerFull    ErrorCode = 3
	KeyError      ErrorCode = 4
	NoFoundTarget ErrorCode = 5
	//old code
	IMPORTANT_WRONG_HEAD      ErrorCode = -1000
	RESOURCE_VITALITY_ERROR   ErrorCode = 1002
	RESOURCE_GOLD_ERROR       ErrorCode = 1003
	RESOURCE_RMB_ERROR        ErrorCode = 1004
	GUILD_EXIT_CHAIRMAN_ERROR ErrorCode = 1022
	UNKNOWN_ERROR             ErrorCode = -9999
)

var ErrorCode_name = map[int32]string{
	0:     "OK",
	1:     "Fail",
	2:     "Error",
	3:     "ServerFull",
	4:     "KeyError",
	5:     "NoFoundTarget",
	-1000: "IMPORTANT_WRONG_HEAD",
	1002:  "RESOURCE_VITALITY_ERROR",
	1003:  "RESOURCE_GOLD_ERROR",
	1004:  "RESOURCE_RMB_ERROR",
	1022:  "GUILD_EXIT_CHAIRMAN_ERROR",
	-9999: "UNKNOWN_ERROR",
}

var ErrorCode_value = map[string]int32{
	"OK":                        0,
	"Fail":                      1,
	"Error":                     2,
	"ServerFull":                3,
	"KeyError":                  4,
	"NoFoundTarget":             5,
	"IMPORTANT_WRONG_HEAD":      -1000,
	"RESOURCE_VITALITY_ERROR":   1002,
	"RESOURCE_GOLD_ERROR":       1003,
	"RESOURCE_RMB_ERROR":        1004,
	"GUILD_EXIT_CHAIRMAN_ERROR": 1022,
	"UNKNOWN_ERROR":             -9999,
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{0}
}

type BattleType int32

const (
	PVE BattleType = 0
	PVP BattleType = 1
)

var BattleType_name = map[int32]string{
	0: "PVE",
	1: "PVP",
}

var BattleType_value = map[string]int32{
	"PVE": 0,
	"PVP": 1,
}

func (BattleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{1}
}

type C2S_TestMsg struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2S_TestMsg) Reset()      { *m = C2S_TestMsg{} }
func (*C2S_TestMsg) ProtoMessage() {}
func (*C2S_TestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{0}
}
func (m *C2S_TestMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_TestMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_TestMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_TestMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_TestMsg.Merge(m, src)
}
func (m *C2S_TestMsg) XXX_Size() int {
	return m.Size()
}
func (m *C2S_TestMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_TestMsg.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_TestMsg proto.InternalMessageInfo

func (m *C2S_TestMsg) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2C_TestMsg struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2C_TestMsg) Reset()      { *m = S2C_TestMsg{} }
func (*S2C_TestMsg) ProtoMessage() {}
func (*S2C_TestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{1}
}
func (m *S2C_TestMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_TestMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_TestMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_TestMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_TestMsg.Merge(m, src)
}
func (m *S2C_TestMsg) XXX_Size() int {
	return m.Size()
}
func (m *S2C_TestMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_TestMsg.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_TestMsg proto.InternalMessageInfo

func (m *S2C_TestMsg) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2C_ConfirmInfo struct {
	MsgHead int32 `protobuf:"varint,1,opt,name=msgHead,proto3" json:"msgHead,omitempty"`
	Code    int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *S2C_ConfirmInfo) Reset()      { *m = S2C_ConfirmInfo{} }
func (*S2C_ConfirmInfo) ProtoMessage() {}
func (*S2C_ConfirmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd0836ea8f2388e7, []int{2}
}
func (m *S2C_ConfirmInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_ConfirmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_ConfirmInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_ConfirmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_ConfirmInfo.Merge(m, src)
}
func (m *S2C_ConfirmInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_ConfirmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_ConfirmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_ConfirmInfo proto.InternalMessageInfo

func (m *S2C_ConfirmInfo) GetMsgHead() int32 {
	if m != nil {
		return m.MsgHead
	}
	return 0
}

func (m *S2C_ConfirmInfo) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterEnum("gameproto.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("gameproto.BattleType", BattleType_name, BattleType_value)
	proto.RegisterType((*C2S_TestMsg)(nil), "gameproto.C2S_TestMsg")
	proto.RegisterType((*S2C_TestMsg)(nil), "gameproto.S2C_TestMsg")
	proto.RegisterType((*S2C_ConfirmInfo)(nil), "gameproto.S2C_ConfirmInfo")
}

func init() { proto.RegisterFile("share.proto", fileDescriptor_cd0836ea8f2388e7) }

var fileDescriptor_cd0836ea8f2388e7 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd1, 0x31, 0x6f, 0xd3, 0x40,
	0x1c, 0x05, 0xf0, 0x3b, 0x37, 0xa9, 0x9b, 0x7f, 0x49, 0x39, 0xfe, 0x20, 0x35, 0x20, 0x38, 0x01,
	0x13, 0xea, 0xc0, 0x50, 0xd8, 0x91, 0xe3, 0x3a, 0x89, 0x95, 0xc6, 0x8e, 0x2e, 0x97, 0x16, 0x26,
	0xcb, 0xe0, 0x6b, 0x88, 0x94, 0xe4, 0xaa, 0x8b, 0x8b, 0xd4, 0x8d, 0x95, 0x8d, 0x91, 0x8f, 0xc0,
	0xca, 0xb7, 0x60, 0xcc, 0xd8, 0x91, 0x38, 0x0b, 0x02, 0x86, 0xb2, 0x31, 0x01, 0x8a, 0x9d, 0x74,
	0xeb, 0x4d, 0xef, 0xde, 0xef, 0x0d, 0x27, 0x1d, 0x6c, 0x4f, 0xdf, 0xc6, 0x46, 0x3d, 0x3d, 0x35,
	0x3a, 0xd5, 0x58, 0x19, 0xc4, 0x63, 0x95, 0xc7, 0xc7, 0x0f, 0x60, 0xdb, 0xdd, 0xef, 0x45, 0x52,
	0x4d, 0xd3, 0xce, 0x74, 0x80, 0x3b, 0x60, 0x0d, 0x93, 0x1a, 0x7d, 0x48, 0x9f, 0x54, 0x85, 0x35,
	0x4c, 0x96, 0xdc, 0xdb, 0x77, 0xaf, 0xe5, 0x17, 0x70, 0x73, 0xc9, 0xae, 0x9e, 0x9c, 0x0c, 0xcd,
	0xd8, 0x9f, 0x9c, 0x68, 0xac, 0x81, 0x3d, 0x9e, 0x0e, 0x5a, 0x2a, 0x2e, 0x76, 0x65, 0xb1, 0xbe,
	0x22, 0x42, 0xe9, 0x8d, 0x4e, 0x54, 0xcd, 0xca, 0xeb, 0x3c, 0xef, 0x7d, 0xb0, 0xa0, 0xe2, 0x19,
	0xa3, 0x8d, 0xab, 0x13, 0x85, 0x9b, 0x60, 0x85, 0x6d, 0x46, 0x70, 0x0b, 0x4a, 0x8d, 0x78, 0x38,
	0x62, 0x14, 0x2b, 0x50, 0xce, 0x99, 0x59, 0xb8, 0x03, 0xd0, 0x53, 0xe6, 0x9d, 0x32, 0x8d, 0xb3,
	0xd1, 0x88, 0x6d, 0xe0, 0x0d, 0xd8, 0x6a, 0xab, 0xf3, 0x42, 0x4b, 0x78, 0x0b, 0xaa, 0x81, 0x6e,
	0xe8, 0xb3, 0x49, 0x22, 0x63, 0x33, 0x50, 0x29, 0x2b, 0xe3, 0x23, 0xb8, 0xe3, 0x77, 0xba, 0xa1,
	0x90, 0x4e, 0x20, 0xa3, 0x63, 0x11, 0x06, 0xcd, 0xa8, 0xe5, 0x39, 0x07, 0xec, 0xd3, 0x9f, 0x7f,
	0xc5, 0xa1, 0x78, 0x1f, 0x76, 0x85, 0xd7, 0x0b, 0xfb, 0xc2, 0xf5, 0xa2, 0x23, 0x5f, 0x3a, 0x87,
	0xbe, 0x7c, 0x15, 0x79, 0x42, 0x84, 0x82, 0xfd, 0xb0, 0xb1, 0x06, 0xb7, 0xaf, 0xb4, 0x19, 0x1e,
	0x1e, 0xac, 0xe4, 0xa7, 0x8d, 0xbb, 0x80, 0x57, 0x22, 0x3a, 0xf5, 0x15, 0xfc, 0xb2, 0x91, 0xc3,
	0xdd, 0x66, 0xdf, 0x5f, 0x4e, 0x5f, 0xfa, 0x32, 0x72, 0x5b, 0x8e, 0x2f, 0x3a, 0x4e, 0xb0, 0xf2,
	0xbf, 0x36, 0xde, 0x83, 0x6a, 0x3f, 0x68, 0x07, 0xe1, 0xf1, 0xba, 0xfb, 0xfd, 0x65, 0xfd, 0x98,
	0x3d, 0x0e, 0x50, 0x8f, 0xd3, 0x74, 0xa4, 0xe4, 0xf9, 0xa9, 0x42, 0x1b, 0x36, 0xba, 0x47, 0x1e,
	0x23, 0x45, 0xe8, 0x32, 0x5a, 0x7f, 0x3e, 0x9b, 0x73, 0x72, 0x31, 0xe7, 0xe4, 0x72, 0xce, 0xe9,
	0xfb, 0x8c, 0xd3, 0xcf, 0x19, 0xa7, 0x5f, 0x33, 0x4e, 0x67, 0x19, 0xa7, 0xdf, 0x32, 0x4e, 0xbf,
	0x67, 0x9c, 0x5c, 0x66, 0x9c, 0x7e, 0x5c, 0x70, 0x32, 0x5b, 0x70, 0x72, 0xb1, 0xe0, 0xe4, 0xf5,
	0x66, 0xfe, 0xcf, 0xcf, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x55, 0xc6, 0x84, 0x61, 0x01, 0x02,
	0x00, 0x00,
}

func (x ErrorCode) String() string {
	s, ok := ErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BattleType) String() string {
	s, ok := BattleType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *C2S_TestMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2S_TestMsg)
	if !ok {
		that2, ok := that.(C2S_TestMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *S2C_TestMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S2C_TestMsg)
	if !ok {
		that2, ok := that.(S2C_TestMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *S2C_ConfirmInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S2C_ConfirmInfo)
	if !ok {
		that2, ok := that.(S2C_ConfirmInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MsgHead != that1.MsgHead {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *C2S_TestMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gameproto.C2S_TestMsg{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S2C_TestMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gameproto.S2C_TestMsg{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S2C_ConfirmInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.S2C_ConfirmInfo{")
	s = append(s, "MsgHead: "+fmt.Sprintf("%#v", this.MsgHead)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringShare(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *C2S_TestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_TestMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_TestMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_TestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_TestMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_TestMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_ConfirmInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_ConfirmInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_ConfirmInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgHead != 0 {
		i = encodeVarintShare(dAtA, i, uint64(m.MsgHead))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintShare(dAtA []byte, offset int, v uint64) int {
	offset -= sovShare(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *C2S_TestMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShare(uint64(m.Id))
	}
	return n
}

func (m *S2C_TestMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShare(uint64(m.Id))
	}
	return n
}

func (m *S2C_ConfirmInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgHead != 0 {
		n += 1 + sovShare(uint64(m.MsgHead))
	}
	if m.Code != 0 {
		n += 1 + sovShare(uint64(m.Code))
	}
	return n
}

func sovShare(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShare(x uint64) (n int) {
	return sovShare(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *C2S_TestMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2S_TestMsg{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S2C_TestMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S2C_TestMsg{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S2C_ConfirmInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S2C_ConfirmInfo{`,
		`MsgHead:` + fmt.Sprintf("%v", this.MsgHead) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringShare(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *C2S_TestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_TestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_TestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_TestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_TestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_TestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_ConfirmInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_ConfirmInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_ConfirmInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHead", wireType)
			}
			m.MsgHead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHead |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShare(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShare
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShare
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShare
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShare
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShare        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShare          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShare = fmt.Errorf("proto: unexpected end of group")
)
