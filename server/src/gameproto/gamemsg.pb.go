// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gamemsg.proto

package gameproto

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//=========chat=============
type ChatMsgType int32

const (
	C2S_PrivateChat      ChatMsgType = 0
	S2C_PrivateChat      ChatMsgType = 1
	S2C_PrivateOtherChat ChatMsgType = 2
	C2S_WorldChat        ChatMsgType = 3
	S2C_WorldChat        ChatMsgType = 4
)

var ChatMsgType_name = map[int32]string{
	0: "C2S_PrivateChat",
	1: "S2C_PrivateChat",
	2: "S2C_PrivateOtherChat",
	3: "C2S_WorldChat",
	4: "S2C_WorldChat",
}

var ChatMsgType_value = map[string]int32{
	"C2S_PrivateChat":      0,
	"S2C_PrivateChat":      1,
	"S2C_PrivateOtherChat": 2,
	"C2S_WorldChat":        3,
	"S2C_WorldChat":        4,
}

func (ChatMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{0}
}

type C2S_PrivateChatMsg struct {
	TargetName string `protobuf:"bytes,1,opt,name=targetName,proto3" json:"targetName,omitempty"`
	Msg        string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *C2S_PrivateChatMsg) Reset()      { *m = C2S_PrivateChatMsg{} }
func (*C2S_PrivateChatMsg) ProtoMessage() {}
func (*C2S_PrivateChatMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{0}
}
func (m *C2S_PrivateChatMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_PrivateChatMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_PrivateChatMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_PrivateChatMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_PrivateChatMsg.Merge(m, src)
}
func (m *C2S_PrivateChatMsg) XXX_Size() int {
	return m.Size()
}
func (m *C2S_PrivateChatMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_PrivateChatMsg.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_PrivateChatMsg proto.InternalMessageInfo

func (m *C2S_PrivateChatMsg) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

func (m *C2S_PrivateChatMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type S2C_PrivateChatMsg struct {
	TargetName string `protobuf:"bytes,1,opt,name=targetName,proto3" json:"targetName,omitempty"`
	Msg        string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Result     int32  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *S2C_PrivateChatMsg) Reset()      { *m = S2C_PrivateChatMsg{} }
func (*S2C_PrivateChatMsg) ProtoMessage() {}
func (*S2C_PrivateChatMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{1}
}
func (m *S2C_PrivateChatMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PrivateChatMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PrivateChatMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PrivateChatMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PrivateChatMsg.Merge(m, src)
}
func (m *S2C_PrivateChatMsg) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PrivateChatMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PrivateChatMsg.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PrivateChatMsg proto.InternalMessageInfo

func (m *S2C_PrivateChatMsg) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

func (m *S2C_PrivateChatMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *S2C_PrivateChatMsg) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type S2C_PrivateOtherChatMsg struct {
	SendName string `protobuf:"bytes,1,opt,name=sendName,proto3" json:"sendName,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *S2C_PrivateOtherChatMsg) Reset()      { *m = S2C_PrivateOtherChatMsg{} }
func (*S2C_PrivateOtherChatMsg) ProtoMessage() {}
func (*S2C_PrivateOtherChatMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{2}
}
func (m *S2C_PrivateOtherChatMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_PrivateOtherChatMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_PrivateOtherChatMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_PrivateOtherChatMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_PrivateOtherChatMsg.Merge(m, src)
}
func (m *S2C_PrivateOtherChatMsg) XXX_Size() int {
	return m.Size()
}
func (m *S2C_PrivateOtherChatMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_PrivateOtherChatMsg.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_PrivateOtherChatMsg proto.InternalMessageInfo

func (m *S2C_PrivateOtherChatMsg) GetSendName() string {
	if m != nil {
		return m.SendName
	}
	return ""
}

func (m *S2C_PrivateOtherChatMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type C2S_WorldChatMsg struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *C2S_WorldChatMsg) Reset()      { *m = C2S_WorldChatMsg{} }
func (*C2S_WorldChatMsg) ProtoMessage() {}
func (*C2S_WorldChatMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{3}
}
func (m *C2S_WorldChatMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_WorldChatMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_WorldChatMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_WorldChatMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_WorldChatMsg.Merge(m, src)
}
func (m *C2S_WorldChatMsg) XXX_Size() int {
	return m.Size()
}
func (m *C2S_WorldChatMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_WorldChatMsg.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_WorldChatMsg proto.InternalMessageInfo

func (m *C2S_WorldChatMsg) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type S2C_WorldChatMsg struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2C_WorldChatMsg) Reset()      { *m = S2C_WorldChatMsg{} }
func (*S2C_WorldChatMsg) ProtoMessage() {}
func (*S2C_WorldChatMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{4}
}
func (m *S2C_WorldChatMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_WorldChatMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_WorldChatMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_WorldChatMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_WorldChatMsg.Merge(m, src)
}
func (m *S2C_WorldChatMsg) XXX_Size() int {
	return m.Size()
}
func (m *S2C_WorldChatMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_WorldChatMsg.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_WorldChatMsg proto.InternalMessageInfo

func (m *S2C_WorldChatMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2C_WorldChatMsg) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type S_ReviseUserInfo struct {
	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	HeadId   int32  `protobuf:"varint,2,opt,name=headId,proto3" json:"headId,omitempty"`
}

func (m *S_ReviseUserInfo) Reset()      { *m = S_ReviseUserInfo{} }
func (*S_ReviseUserInfo) ProtoMessage() {}
func (*S_ReviseUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{5}
}
func (m *S_ReviseUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S_ReviseUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S_ReviseUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S_ReviseUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S_ReviseUserInfo.Merge(m, src)
}
func (m *S_ReviseUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *S_ReviseUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S_ReviseUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S_ReviseUserInfo proto.InternalMessageInfo

func (m *S_ReviseUserInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *S_ReviseUserInfo) GetHeadId() int32 {
	if m != nil {
		return m.HeadId
	}
	return 0
}

type C_Response struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *C_Response) Reset()      { *m = C_Response{} }
func (*C_Response) ProtoMessage() {}
func (*C_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{6}
}
func (m *C_Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C_Response.Merge(m, src)
}
func (m *C_Response) XXX_Size() int {
	return m.Size()
}
func (m *C_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_C_Response.DiscardUnknown(m)
}

var xxx_messageInfo_C_Response proto.InternalMessageInfo

func (m *C_Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *C_Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type C_UpateAttr struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val int64  `protobuf:"varint,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *C_UpateAttr) Reset()      { *m = C_UpateAttr{} }
func (*C_UpateAttr) ProtoMessage() {}
func (*C_UpateAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{7}
}
func (m *C_UpateAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C_UpateAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C_UpateAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C_UpateAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C_UpateAttr.Merge(m, src)
}
func (m *C_UpateAttr) XXX_Size() int {
	return m.Size()
}
func (m *C_UpateAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_C_UpateAttr.DiscardUnknown(m)
}

var xxx_messageInfo_C_UpateAttr proto.InternalMessageInfo

func (m *C_UpateAttr) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *C_UpateAttr) GetVal() int64 {
	if m != nil {
		return m.Val
	}
	return 0
}

//请求战斗
type S_RequestBattle struct {
	StageId    int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	BattleType int32 `protobuf:"varint,2,opt,name=battleType,proto3" json:"battleType,omitempty"`
}

func (m *S_RequestBattle) Reset()      { *m = S_RequestBattle{} }
func (*S_RequestBattle) ProtoMessage() {}
func (*S_RequestBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{8}
}
func (m *S_RequestBattle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S_RequestBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S_RequestBattle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S_RequestBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S_RequestBattle.Merge(m, src)
}
func (m *S_RequestBattle) XXX_Size() int {
	return m.Size()
}
func (m *S_RequestBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_S_RequestBattle.DiscardUnknown(m)
}

var xxx_messageInfo_S_RequestBattle proto.InternalMessageInfo

func (m *S_RequestBattle) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *S_RequestBattle) GetBattleType() int32 {
	if m != nil {
		return m.BattleType
	}
	return 0
}

type C_RequestBattle struct {
	StageId    int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	BattleType int32 `protobuf:"varint,2,opt,name=battleType,proto3" json:"battleType,omitempty"`
	ErrCode    int32 `protobuf:"varint,3,opt,name=errCode,proto3" json:"errCode,omitempty"`
}

func (m *C_RequestBattle) Reset()      { *m = C_RequestBattle{} }
func (*C_RequestBattle) ProtoMessage() {}
func (*C_RequestBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{9}
}
func (m *C_RequestBattle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C_RequestBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C_RequestBattle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C_RequestBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C_RequestBattle.Merge(m, src)
}
func (m *C_RequestBattle) XXX_Size() int {
	return m.Size()
}
func (m *C_RequestBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_C_RequestBattle.DiscardUnknown(m)
}

var xxx_messageInfo_C_RequestBattle proto.InternalMessageInfo

func (m *C_RequestBattle) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *C_RequestBattle) GetBattleType() int32 {
	if m != nil {
		return m.BattleType
	}
	return 0
}

func (m *C_RequestBattle) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

//战斗开始
type C_StartBattle struct {
	StageId    int32  `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	BattleType int32  `protobuf:"varint,2,opt,name=battleType,proto3" json:"battleType,omitempty"`
	RoomId     string `protobuf:"bytes,3,opt,name=roomId,proto3" json:"roomId,omitempty"`
}

func (m *C_StartBattle) Reset()      { *m = C_StartBattle{} }
func (*C_StartBattle) ProtoMessage() {}
func (*C_StartBattle) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{10}
}
func (m *C_StartBattle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C_StartBattle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C_StartBattle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C_StartBattle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C_StartBattle.Merge(m, src)
}
func (m *C_StartBattle) XXX_Size() int {
	return m.Size()
}
func (m *C_StartBattle) XXX_DiscardUnknown() {
	xxx_messageInfo_C_StartBattle.DiscardUnknown(m)
}

var xxx_messageInfo_C_StartBattle proto.InternalMessageInfo

func (m *C_StartBattle) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *C_StartBattle) GetBattleType() int32 {
	if m != nil {
		return m.BattleType
	}
	return 0
}

func (m *C_StartBattle) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

//结算
type C_Balance struct {
	StageId    int32    `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	BattleType int32    `protobuf:"varint,2,opt,name=battleType,proto3" json:"battleType,omitempty"`
	Awards     []*Award `protobuf:"bytes,3,rep,name=awards,proto3" json:"awards,omitempty"`
}

func (m *C_Balance) Reset()      { *m = C_Balance{} }
func (*C_Balance) ProtoMessage() {}
func (*C_Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{11}
}
func (m *C_Balance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C_Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C_Balance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C_Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C_Balance.Merge(m, src)
}
func (m *C_Balance) XXX_Size() int {
	return m.Size()
}
func (m *C_Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_C_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_C_Balance proto.InternalMessageInfo

func (m *C_Balance) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *C_Balance) GetBattleType() int32 {
	if m != nil {
		return m.BattleType
	}
	return 0
}

func (m *C_Balance) GetAwards() []*Award {
	if m != nil {
		return m.Awards
	}
	return nil
}

type Award struct {
	AType int32 `protobuf:"varint,1,opt,name=aType,proto3" json:"aType,omitempty"`
	AVal  int32 `protobuf:"varint,2,opt,name=aVal,proto3" json:"aVal,omitempty"`
}

func (m *Award) Reset()      { *m = Award{} }
func (*Award) ProtoMessage() {}
func (*Award) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{12}
}
func (m *Award) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Award) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Award.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Award) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Award.Merge(m, src)
}
func (m *Award) XXX_Size() int {
	return m.Size()
}
func (m *Award) XXX_DiscardUnknown() {
	xxx_messageInfo_Award.DiscardUnknown(m)
}

var xxx_messageInfo_Award proto.InternalMessageInfo

func (m *Award) GetAType() int32 {
	if m != nil {
		return m.AType
	}
	return 0
}

func (m *Award) GetAVal() int32 {
	if m != nil {
		return m.AVal
	}
	return 0
}

//fight
type FVector struct {
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *FVector) Reset()      { *m = FVector{} }
func (*FVector) ProtoMessage() {}
func (*FVector) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{13}
}
func (m *FVector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FVector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FVector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FVector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FVector.Merge(m, src)
}
func (m *FVector) XXX_Size() int {
	return m.Size()
}
func (m *FVector) XXX_DiscardUnknown() {
	xxx_messageInfo_FVector.DiscardUnknown(m)
}

var xxx_messageInfo_FVector proto.InternalMessageInfo

func (m *FVector) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *FVector) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Move struct {
	Angle float32 `protobuf:"fixed32,1,opt,name=angle,proto3" json:"angle,omitempty"`
}

func (m *Move) Reset()      { *m = Move{} }
func (*Move) ProtoMessage() {}
func (*Move) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{14}
}
func (m *Move) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Move) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Move.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Move) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Move.Merge(m, src)
}
func (m *Move) XXX_Size() int {
	return m.Size()
}
func (m *Move) XXX_DiscardUnknown() {
	xxx_messageInfo_Move.DiscardUnknown(m)
}

var xxx_messageInfo_Move proto.InternalMessageInfo

func (m *Move) GetAngle() float32 {
	if m != nil {
		return m.Angle
	}
	return 0
}

type Shot struct {
	Id       int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BulletId int32    `protobuf:"varint,2,opt,name=bulletId,proto3" json:"bulletId,omitempty"`
	Pos      *FVector `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	Angel    float32  `protobuf:"fixed32,4,opt,name=angel,proto3" json:"angel,omitempty"`
}

func (m *Shot) Reset()      { *m = Shot{} }
func (*Shot) ProtoMessage() {}
func (*Shot) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{15}
}
func (m *Shot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Shot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Shot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Shot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shot.Merge(m, src)
}
func (m *Shot) XXX_Size() int {
	return m.Size()
}
func (m *Shot) XXX_DiscardUnknown() {
	xxx_messageInfo_Shot.DiscardUnknown(m)
}

var xxx_messageInfo_Shot proto.InternalMessageInfo

func (m *Shot) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Shot) GetBulletId() int32 {
	if m != nil {
		return m.BulletId
	}
	return 0
}

func (m *Shot) GetPos() *FVector {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Shot) GetAngel() float32 {
	if m != nil {
		return m.Angel
	}
	return 0
}

type UseItem struct {
	ItemId int32 `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (m *UseItem) Reset()      { *m = UseItem{} }
func (*UseItem) ProtoMessage() {}
func (*UseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{16}
}
func (m *UseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UseItem.Merge(m, src)
}
func (m *UseItem) XXX_Size() int {
	return m.Size()
}
func (m *UseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_UseItem.DiscardUnknown(m)
}

var xxx_messageInfo_UseItem proto.InternalMessageInfo

func (m *UseItem) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type FighterSnapInfo struct {
	Id  int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pos *FVector `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Vel *FVector `protobuf:"bytes,3,opt,name=vel,proto3" json:"vel,omitempty"`
}

func (m *FighterSnapInfo) Reset()      { *m = FighterSnapInfo{} }
func (*FighterSnapInfo) ProtoMessage() {}
func (*FighterSnapInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{17}
}
func (m *FighterSnapInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FighterSnapInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FighterSnapInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FighterSnapInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FighterSnapInfo.Merge(m, src)
}
func (m *FighterSnapInfo) XXX_Size() int {
	return m.Size()
}
func (m *FighterSnapInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FighterSnapInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FighterSnapInfo proto.InternalMessageInfo

func (m *FighterSnapInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FighterSnapInfo) GetPos() *FVector {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *FighterSnapInfo) GetVel() *FVector {
	if m != nil {
		return m.Vel
	}
	return nil
}

type Snap struct {
	Infos []*FighterSnapInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (m *Snap) Reset()      { *m = Snap{} }
func (*Snap) ProtoMessage() {}
func (*Snap) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{18}
}
func (m *Snap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Snap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snap.Merge(m, src)
}
func (m *Snap) XXX_Size() int {
	return m.Size()
}
func (m *Snap) XXX_DiscardUnknown() {
	xxx_messageInfo_Snap.DiscardUnknown(m)
}

var xxx_messageInfo_Snap proto.InternalMessageInfo

func (m *Snap) GetInfos() []*FighterSnapInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type FighterInfo struct {
	Id   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pos  *FVector `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Vel  *FVector `protobuf:"bytes,3,opt,name=vel,proto3" json:"vel,omitempty"`
	Name string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Hp   int32    `protobuf:"varint,5,opt,name=hp,proto3" json:"hp,omitempty"`
}

func (m *FighterInfo) Reset()      { *m = FighterInfo{} }
func (*FighterInfo) ProtoMessage() {}
func (*FighterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{19}
}
func (m *FighterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FighterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FighterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FighterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FighterInfo.Merge(m, src)
}
func (m *FighterInfo) XXX_Size() int {
	return m.Size()
}
func (m *FighterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FighterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FighterInfo proto.InternalMessageInfo

func (m *FighterInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FighterInfo) GetPos() *FVector {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *FighterInfo) GetVel() *FVector {
	if m != nil {
		return m.Vel
	}
	return nil
}

func (m *FighterInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FighterInfo) GetHp() int32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

type BattleStart struct {
	Self     *FighterInfo   `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
	Fighters []*FighterInfo `protobuf:"bytes,2,rep,name=fighters,proto3" json:"fighters,omitempty"`
}

func (m *BattleStart) Reset()      { *m = BattleStart{} }
func (*BattleStart) ProtoMessage() {}
func (*BattleStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{20}
}
func (m *BattleStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleStart.Merge(m, src)
}
func (m *BattleStart) XXX_Size() int {
	return m.Size()
}
func (m *BattleStart) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleStart.DiscardUnknown(m)
}

var xxx_messageInfo_BattleStart proto.InternalMessageInfo

func (m *BattleStart) GetSelf() *FighterInfo {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *BattleStart) GetFighters() []*FighterInfo {
	if m != nil {
		return m.Fighters
	}
	return nil
}

type NewStage struct {
	Stage    int32          `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`
	Fighters []*FighterInfo `protobuf:"bytes,2,rep,name=fighters,proto3" json:"fighters,omitempty"`
}

func (m *NewStage) Reset()      { *m = NewStage{} }
func (*NewStage) ProtoMessage() {}
func (*NewStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{21}
}
func (m *NewStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewStage.Merge(m, src)
}
func (m *NewStage) XXX_Size() int {
	return m.Size()
}
func (m *NewStage) XXX_DiscardUnknown() {
	xxx_messageInfo_NewStage.DiscardUnknown(m)
}

var xxx_messageInfo_NewStage proto.InternalMessageInfo

func (m *NewStage) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *NewStage) GetFighters() []*FighterInfo {
	if m != nil {
		return m.Fighters
	}
	return nil
}

type GameOver struct {
	Winner int32 `protobuf:"varint,1,opt,name=winner,proto3" json:"winner,omitempty"`
	Time   int32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Stage  int32 `protobuf:"varint,3,opt,name=stage,proto3" json:"stage,omitempty"`
	Kill   int32 `protobuf:"varint,4,opt,name=kill,proto3" json:"kill,omitempty"`
}

func (m *GameOver) Reset()      { *m = GameOver{} }
func (*GameOver) ProtoMessage() {}
func (*GameOver) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{22}
}
func (m *GameOver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameOver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameOver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameOver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameOver.Merge(m, src)
}
func (m *GameOver) XXX_Size() int {
	return m.Size()
}
func (m *GameOver) XXX_DiscardUnknown() {
	xxx_messageInfo_GameOver.DiscardUnknown(m)
}

var xxx_messageInfo_GameOver proto.InternalMessageInfo

func (m *GameOver) GetWinner() int32 {
	if m != nil {
		return m.Winner
	}
	return 0
}

func (m *GameOver) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GameOver) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *GameOver) GetKill() int32 {
	if m != nil {
		return m.Kill
	}
	return 0
}

type Hit struct {
	BulletId int32 `protobuf:"varint,1,opt,name=bulletId,proto3" json:"bulletId,omitempty"`
	TargetId int32 `protobuf:"varint,2,opt,name=targetId,proto3" json:"targetId,omitempty"`
	LoseHP   int32 `protobuf:"varint,3,opt,name=loseHP,proto3" json:"loseHP,omitempty"`
}

func (m *Hit) Reset()      { *m = Hit{} }
func (*Hit) ProtoMessage() {}
func (*Hit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{23}
}
func (m *Hit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hit.Merge(m, src)
}
func (m *Hit) XXX_Size() int {
	return m.Size()
}
func (m *Hit) XXX_DiscardUnknown() {
	xxx_messageInfo_Hit.DiscardUnknown(m)
}

var xxx_messageInfo_Hit proto.InternalMessageInfo

func (m *Hit) GetBulletId() int32 {
	if m != nil {
		return m.BulletId
	}
	return 0
}

func (m *Hit) GetTargetId() int32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Hit) GetLoseHP() int32 {
	if m != nil {
		return m.LoseHP
	}
	return 0
}

type AddHP struct {
	Add int32 `protobuf:"varint,1,opt,name=add,proto3" json:"add,omitempty"`
	Id  int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AddHP) Reset()      { *m = AddHP{} }
func (*AddHP) ProtoMessage() {}
func (*AddHP) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{24}
}
func (m *AddHP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddHP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddHP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddHP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddHP.Merge(m, src)
}
func (m *AddHP) XXX_Size() int {
	return m.Size()
}
func (m *AddHP) XXX_DiscardUnknown() {
	xxx_messageInfo_AddHP.DiscardUnknown(m)
}

var xxx_messageInfo_AddHP proto.InternalMessageInfo

func (m *AddHP) GetAdd() int32 {
	if m != nil {
		return m.Add
	}
	return 0
}

func (m *AddHP) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Dead struct {
	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EnemyId int32 `protobuf:"varint,2,opt,name=enemyId,proto3" json:"enemyId,omitempty"`
}

func (m *Dead) Reset()      { *m = Dead{} }
func (*Dead) ProtoMessage() {}
func (*Dead) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{25}
}
func (m *Dead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dead.Merge(m, src)
}
func (m *Dead) XXX_Size() int {
	return m.Size()
}
func (m *Dead) XXX_DiscardUnknown() {
	xxx_messageInfo_Dead.DiscardUnknown(m)
}

var xxx_messageInfo_Dead proto.InternalMessageInfo

func (m *Dead) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Dead) GetEnemyId() int32 {
	if m != nil {
		return m.EnemyId
	}
	return 0
}

type AddEntity struct {
	Id    int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pos   *FVector `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Vel   *FVector `protobuf:"bytes,3,opt,name=vel,proto3" json:"vel,omitempty"`
	Etype int32    `protobuf:"varint,4,opt,name=etype,proto3" json:"etype,omitempty"`
}

func (m *AddEntity) Reset()      { *m = AddEntity{} }
func (*AddEntity) ProtoMessage() {}
func (*AddEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{26}
}
func (m *AddEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEntity.Merge(m, src)
}
func (m *AddEntity) XXX_Size() int {
	return m.Size()
}
func (m *AddEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEntity.DiscardUnknown(m)
}

var xxx_messageInfo_AddEntity proto.InternalMessageInfo

func (m *AddEntity) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddEntity) GetPos() *FVector {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *AddEntity) GetVel() *FVector {
	if m != nil {
		return m.Vel
	}
	return nil
}

func (m *AddEntity) GetEtype() int32 {
	if m != nil {
		return m.Etype
	}
	return 0
}

type RemoveEntity struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Etype int32 `protobuf:"varint,2,opt,name=etype,proto3" json:"etype,omitempty"`
}

func (m *RemoveEntity) Reset()      { *m = RemoveEntity{} }
func (*RemoveEntity) ProtoMessage() {}
func (*RemoveEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ecd7041722872b9, []int{27}
}
func (m *RemoveEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveEntity.Merge(m, src)
}
func (m *RemoveEntity) XXX_Size() int {
	return m.Size()
}
func (m *RemoveEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveEntity.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveEntity proto.InternalMessageInfo

func (m *RemoveEntity) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RemoveEntity) GetEtype() int32 {
	if m != nil {
		return m.Etype
	}
	return 0
}

func init() {
	proto.RegisterEnum("gameproto.ChatMsgType", ChatMsgType_name, ChatMsgType_value)
	proto.RegisterType((*C2S_PrivateChatMsg)(nil), "gameproto.C2S_PrivateChatMsg")
	proto.RegisterType((*S2C_PrivateChatMsg)(nil), "gameproto.S2C_PrivateChatMsg")
	proto.RegisterType((*S2C_PrivateOtherChatMsg)(nil), "gameproto.S2C_PrivateOtherChatMsg")
	proto.RegisterType((*C2S_WorldChatMsg)(nil), "gameproto.C2S_WorldChatMsg")
	proto.RegisterType((*S2C_WorldChatMsg)(nil), "gameproto.S2C_WorldChatMsg")
	proto.RegisterType((*S_ReviseUserInfo)(nil), "gameproto.S_ReviseUserInfo")
	proto.RegisterType((*C_Response)(nil), "gameproto.C_Response")
	proto.RegisterType((*C_UpateAttr)(nil), "gameproto.C_UpateAttr")
	proto.RegisterType((*S_RequestBattle)(nil), "gameproto.S_RequestBattle")
	proto.RegisterType((*C_RequestBattle)(nil), "gameproto.C_RequestBattle")
	proto.RegisterType((*C_StartBattle)(nil), "gameproto.C_StartBattle")
	proto.RegisterType((*C_Balance)(nil), "gameproto.C_Balance")
	proto.RegisterType((*Award)(nil), "gameproto.Award")
	proto.RegisterType((*FVector)(nil), "gameproto.FVector")
	proto.RegisterType((*Move)(nil), "gameproto.Move")
	proto.RegisterType((*Shot)(nil), "gameproto.Shot")
	proto.RegisterType((*UseItem)(nil), "gameproto.UseItem")
	proto.RegisterType((*FighterSnapInfo)(nil), "gameproto.FighterSnapInfo")
	proto.RegisterType((*Snap)(nil), "gameproto.Snap")
	proto.RegisterType((*FighterInfo)(nil), "gameproto.FighterInfo")
	proto.RegisterType((*BattleStart)(nil), "gameproto.BattleStart")
	proto.RegisterType((*NewStage)(nil), "gameproto.NewStage")
	proto.RegisterType((*GameOver)(nil), "gameproto.GameOver")
	proto.RegisterType((*Hit)(nil), "gameproto.Hit")
	proto.RegisterType((*AddHP)(nil), "gameproto.AddHP")
	proto.RegisterType((*Dead)(nil), "gameproto.Dead")
	proto.RegisterType((*AddEntity)(nil), "gameproto.AddEntity")
	proto.RegisterType((*RemoveEntity)(nil), "gameproto.RemoveEntity")
}

func init() { proto.RegisterFile("gamemsg.proto", fileDescriptor_0ecd7041722872b9) }

var fileDescriptor_0ecd7041722872b9 = []byte{
	// 931 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0xff, 0x6c, 0x69, 0x14, 0xc7, 0xec, 0xd6, 0x48, 0x05, 0xa3, 0x20, 0xdc, 0x45, 0x5a,
	0xb8, 0x39, 0x18, 0x89, 0x9a, 0x43, 0xd0, 0x9b, 0xcd, 0xd6, 0xb1, 0x50, 0x24, 0x31, 0xa8, 0x38,
	0xbd, 0x55, 0x5d, 0x9b, 0x63, 0x89, 0x30, 0x7f, 0x54, 0xee, 0x5a, 0x8e, 0x0e, 0x05, 0xfa, 0x02,
	0x05, 0xfa, 0x18, 0x7d, 0x94, 0x1e, 0x7d, 0xcc, 0xb1, 0x96, 0x2f, 0x3d, 0xe6, 0x11, 0x8a, 0x5d,
	0x2e, 0x69, 0x4a, 0x71, 0x7d, 0xa8, 0xe3, 0xdb, 0x7c, 0xbb, 0xb3, 0xf3, 0x7d, 0xb3, 0xfc, 0x76,
	0x97, 0xb0, 0x32, 0x64, 0x09, 0x26, 0x7c, 0xb8, 0x35, 0xce, 0x33, 0x91, 0x91, 0x96, 0x84, 0x2a,
	0xa4, 0xbb, 0x40, 0xfc, 0x6e, 0x7f, 0xb0, 0x9f, 0x47, 0x13, 0x26, 0xd0, 0x1f, 0x31, 0xf1, 0x82,
	0x0f, 0x89, 0x07, 0x20, 0x58, 0x3e, 0x44, 0xf1, 0x92, 0x25, 0xd8, 0x31, 0x36, 0x8c, 0xcd, 0x56,
	0x50, 0x1b, 0x21, 0x2e, 0x58, 0x09, 0x1f, 0x76, 0x4c, 0x35, 0x21, 0x43, 0xfa, 0x13, 0x90, 0x7e,
	0xd7, 0xbf, 0x75, 0x1d, 0xf2, 0x00, 0x96, 0x72, 0xe4, 0xa7, 0xb1, 0xe8, 0x58, 0x1b, 0xc6, 0xa6,
	0x13, 0x68, 0x44, 0x9f, 0xc3, 0x67, 0xb5, 0xfa, 0xaf, 0xc4, 0x08, 0xf3, 0x92, 0x64, 0x1d, 0x9a,
	0x1c, 0xd3, 0xb0, 0x46, 0x51, 0xe1, 0x6b, 0x84, 0x7e, 0x05, 0xae, 0x6c, 0xf8, 0xc7, 0x2c, 0x8f,
	0xc3, 0xb2, 0x02, 0x01, 0x3b, 0x64, 0x82, 0xe9, 0xd5, 0x2a, 0xa6, 0xdf, 0x82, 0x2b, 0x09, 0x17,
	0xf3, 0xd2, 0x2b, 0x16, 0x15, 0x57, 0x6b, 0xcd, 0xda, 0xda, 0x5d, 0x70, 0xfb, 0x83, 0x00, 0x27,
	0x11, 0xc7, 0x03, 0x8e, 0x79, 0x2f, 0x3d, 0xce, 0xa4, 0xca, 0x34, 0x3a, 0x3a, 0xa9, 0xad, 0xaf,
	0xb0, 0x6c, 0x7a, 0x84, 0x2c, 0xec, 0x85, 0xaa, 0x8a, 0x13, 0x68, 0x44, 0x9f, 0x01, 0xf8, 0x83,
	0x00, 0xf9, 0x38, 0x4b, 0x39, 0x92, 0x0e, 0x2c, 0x63, 0x9e, 0xfb, 0x59, 0x58, 0x14, 0x70, 0x82,
	0x12, 0x5e, 0xd3, 0xe5, 0x13, 0x68, 0xfb, 0x83, 0x83, 0x31, 0x13, 0xb8, 0x2d, 0x44, 0x2e, 0x13,
	0x4e, 0x70, 0xaa, 0x79, 0x65, 0x28, 0x47, 0x26, 0x2c, 0x56, 0x4b, 0xac, 0x40, 0x86, 0xf4, 0x07,
	0x58, 0x95, 0xa2, 0x7f, 0x39, 0x45, 0x2e, 0x76, 0x98, 0x10, 0xb1, 0x62, 0xe4, 0x82, 0x0d, 0xb1,
	0x17, 0x96, 0x8c, 0x1a, 0xca, 0x0f, 0x7b, 0xa8, 0x72, 0x5e, 0x4f, 0xc7, 0xa8, 0x55, 0xd7, 0x46,
	0x28, 0xc2, 0xaa, 0xff, 0xb1, 0x8a, 0xd5, 0x1b, 0xb7, 0xe6, 0x1a, 0xa7, 0x0c, 0x56, 0xfc, 0x41,
	0x5f, 0xb0, 0xfc, 0xf6, 0x24, 0xd2, 0x78, 0x59, 0x96, 0xf4, 0x42, 0xc5, 0xd1, 0x0a, 0x34, 0xa2,
	0x19, 0xb4, 0xfc, 0xc1, 0x0e, 0x8b, 0x59, 0x7a, 0x74, 0x9b, 0xf2, 0x9b, 0xb0, 0xc4, 0xce, 0x58,
	0x1e, 0xf2, 0x8e, 0xb5, 0x61, 0x6d, 0xb6, 0xbb, 0xee, 0x56, 0x75, 0x06, 0xb7, 0xb6, 0xe5, 0x44,
	0xa0, 0xe7, 0xe9, 0x13, 0x70, 0xd4, 0x00, 0x59, 0x03, 0x87, 0xa9, 0x6a, 0x05, 0x55, 0x01, 0xa4,
	0xdf, 0xd8, 0x1b, 0xfd, 0xe5, 0x9c, 0x40, 0xc5, 0xf4, 0x4b, 0x58, 0xde, 0x7d, 0x83, 0x47, 0x22,
	0xcb, 0xc9, 0x3d, 0x30, 0xde, 0xaa, 0x05, 0x66, 0x60, 0xbc, 0x95, 0x68, 0xaa, 0x32, 0xcd, 0xc0,
	0x98, 0xd2, 0xcf, 0xc1, 0x7e, 0x91, 0x4d, 0x50, 0x15, 0x4e, 0x87, 0x31, 0xea, 0xbc, 0x02, 0xd0,
	0x14, 0xec, 0xfe, 0x28, 0x13, 0xe4, 0x3e, 0x98, 0x51, 0xd9, 0x9e, 0x19, 0x85, 0xd2, 0xb8, 0x87,
	0xa7, 0x71, 0x8c, 0xa2, 0xb2, 0x67, 0x85, 0xc9, 0x43, 0xb0, 0xc6, 0x19, 0x57, 0x3b, 0xd6, 0xee,
	0x92, 0x5a, 0x4b, 0x5a, 0x4e, 0x20, 0xa7, 0x35, 0x1f, 0xc6, 0x1d, 0xbb, 0xe2, 0xc3, 0x98, 0x7e,
	0x01, 0xcb, 0x07, 0x1c, 0x7b, 0x02, 0x13, 0xb9, 0xf7, 0x91, 0xc0, 0xa4, 0xda, 0x55, 0x8d, 0x68,
	0x02, 0xab, 0xbb, 0xd1, 0x70, 0x24, 0x30, 0xef, 0xa7, 0x6c, 0xac, 0x8e, 0xd1, 0xa2, 0x3a, 0xad,
	0xc0, 0xbc, 0x59, 0xc1, 0x43, 0xb0, 0x26, 0x18, 0xdf, 0xa4, 0x73, 0x82, 0x31, 0x7d, 0x06, 0xb6,
	0xe4, 0x21, 0x8f, 0xc1, 0x89, 0xd2, 0xe3, 0x8c, 0x77, 0x0c, 0xf5, 0xa9, 0xd6, 0xeb, 0xf9, 0xf3,
	0x72, 0x82, 0x22, 0x91, 0xfe, 0x6e, 0x40, 0x5b, 0x4f, 0xdd, 0xb5, 0xca, 0xea, 0x12, 0xb2, 0x6b,
	0x97, 0xd0, 0x7d, 0x30, 0x47, 0xe3, 0x8e, 0x53, 0xf0, 0x8d, 0xc6, 0x34, 0x81, 0x76, 0x71, 0x20,
	0xd4, 0xd9, 0x20, 0x8f, 0xc0, 0xe6, 0x18, 0x1f, 0x2b, 0x41, 0xed, 0xee, 0x83, 0x0f, 0xfb, 0x51,
	0xbd, 0xa8, 0x1c, 0xd2, 0x85, 0xe6, 0x71, 0x31, 0x28, 0xf5, 0x5a, 0x37, 0xe4, 0x57, 0x79, 0xf4,
	0x35, 0x34, 0x5f, 0xe2, 0x59, 0x5f, 0x1e, 0x05, 0xf9, 0xb1, 0xd5, 0x99, 0x28, 0x5d, 0xab, 0xc0,
	0xff, 0xaa, 0xfa, 0x33, 0x34, 0x9f, 0xb3, 0x04, 0x5f, 0x4d, 0x30, 0x97, 0x0e, 0x39, 0x8b, 0xd2,
	0x14, 0xf3, 0xd2, 0x21, 0x05, 0x92, 0x9b, 0x21, 0xa2, 0xa4, 0x3c, 0x70, 0x2a, 0xbe, 0x52, 0x60,
	0xd5, 0x15, 0x10, 0xb0, 0x4f, 0xa2, 0xb8, 0xf0, 0xa0, 0x13, 0xa8, 0x98, 0x1e, 0x80, 0xb5, 0x17,
	0x89, 0x39, 0x87, 0x1b, 0x0b, 0x0e, 0x5f, 0x87, 0x66, 0xf1, 0x5e, 0x5d, 0xb9, 0xbf, 0xc4, 0x52,
	0x54, 0x9c, 0x71, 0xdc, 0xdb, 0x2f, 0xdf, 0xaa, 0x02, 0xd1, 0xaf, 0xc1, 0xd9, 0x0e, 0xc3, 0xbd,
	0x7d, 0x79, 0xc9, 0xb2, 0xb0, 0xac, 0x29, 0x43, 0x6d, 0x0c, 0xb3, 0x34, 0x06, 0x7d, 0x0c, 0xf6,
	0x77, 0xc8, 0xc2, 0x0f, 0x0c, 0x23, 0xaf, 0xbc, 0x14, 0x93, 0x69, 0xc5, 0x5a, 0x42, 0xfa, 0x2b,
	0xb4, 0xb6, 0xc3, 0xf0, 0xfb, 0x54, 0x44, 0x62, 0x7a, 0xa7, 0x3e, 0x5b, 0x03, 0x07, 0x85, 0xbc,
	0x7e, 0x8a, 0x1d, 0x2b, 0x00, 0x7d, 0x0a, 0xf7, 0x02, 0x4c, 0xb2, 0x09, 0xfe, 0x87, 0x82, 0x6a,
	0x95, 0x59, 0x5b, 0xf5, 0xe8, 0x0c, 0xda, 0xfa, 0x0d, 0x55, 0x77, 0xd8, 0xa7, 0xb0, 0xba, 0xf0,
	0xd3, 0xe1, 0x36, 0xe4, 0xe0, 0xc2, 0x1f, 0x84, 0x6b, 0x90, 0x0e, 0xac, 0x5d, 0xf7, 0xec, 0xbb,
	0x26, 0xf9, 0x04, 0x56, 0xe6, 0xde, 0x71, 0xd7, 0x92, 0x43, 0x73, 0x4f, 0xb6, 0x6b, 0xef, 0x3c,
	0x3d, 0xbf, 0xf0, 0x1a, 0xef, 0x2e, 0xbc, 0xc6, 0xfb, 0x0b, 0xcf, 0xf8, 0x6d, 0xe6, 0x19, 0x7f,
	0xce, 0x3c, 0xe3, 0xaf, 0x99, 0x67, 0x9c, 0xcf, 0x3c, 0xe3, 0xef, 0x99, 0x67, 0xfc, 0x33, 0xf3,
	0x1a, 0xef, 0x67, 0x9e, 0xf1, 0xc7, 0xa5, 0xd7, 0x38, 0xbf, 0xf4, 0x1a, 0xef, 0x2e, 0xbd, 0xc6,
	0xe1, 0x92, 0xda, 0x8e, 0x6f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xe8, 0x5e, 0x98, 0x37,
	0x09, 0x00, 0x00,
}

func (x ChatMsgType) String() string {
	s, ok := ChatMsgType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *C2S_PrivateChatMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2S_PrivateChatMsg)
	if !ok {
		that2, ok := that.(C2S_PrivateChatMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TargetName != that1.TargetName {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *S2C_PrivateChatMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S2C_PrivateChatMsg)
	if !ok {
		that2, ok := that.(S2C_PrivateChatMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TargetName != that1.TargetName {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *S2C_PrivateOtherChatMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S2C_PrivateOtherChatMsg)
	if !ok {
		that2, ok := that.(S2C_PrivateOtherChatMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SendName != that1.SendName {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *C2S_WorldChatMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C2S_WorldChatMsg)
	if !ok {
		that2, ok := that.(C2S_WorldChatMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *S2C_WorldChatMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S2C_WorldChatMsg)
	if !ok {
		that2, ok := that.(S2C_WorldChatMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *S_ReviseUserInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S_ReviseUserInfo)
	if !ok {
		that2, ok := that.(S_ReviseUserInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.HeadId != that1.HeadId {
		return false
	}
	return true
}
func (this *C_Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C_Response)
	if !ok {
		that2, ok := that.(C_Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *C_UpateAttr) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C_UpateAttr)
	if !ok {
		that2, ok := that.(C_UpateAttr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Val != that1.Val {
		return false
	}
	return true
}
func (this *S_RequestBattle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S_RequestBattle)
	if !ok {
		that2, ok := that.(S_RequestBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StageId != that1.StageId {
		return false
	}
	if this.BattleType != that1.BattleType {
		return false
	}
	return true
}
func (this *C_RequestBattle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C_RequestBattle)
	if !ok {
		that2, ok := that.(C_RequestBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StageId != that1.StageId {
		return false
	}
	if this.BattleType != that1.BattleType {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	return true
}
func (this *C_StartBattle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C_StartBattle)
	if !ok {
		that2, ok := that.(C_StartBattle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StageId != that1.StageId {
		return false
	}
	if this.BattleType != that1.BattleType {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	return true
}
func (this *C_Balance) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*C_Balance)
	if !ok {
		that2, ok := that.(C_Balance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StageId != that1.StageId {
		return false
	}
	if this.BattleType != that1.BattleType {
		return false
	}
	if len(this.Awards) != len(that1.Awards) {
		return false
	}
	for i := range this.Awards {
		if !this.Awards[i].Equal(that1.Awards[i]) {
			return false
		}
	}
	return true
}
func (this *Award) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Award)
	if !ok {
		that2, ok := that.(Award)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AType != that1.AType {
		return false
	}
	if this.AVal != that1.AVal {
		return false
	}
	return true
}
func (this *FVector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FVector)
	if !ok {
		that2, ok := that.(FVector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *Move) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Move)
	if !ok {
		that2, ok := that.(Move)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Angle != that1.Angle {
		return false
	}
	return true
}
func (this *Shot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Shot)
	if !ok {
		that2, ok := that.(Shot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.BulletId != that1.BulletId {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if this.Angel != that1.Angel {
		return false
	}
	return true
}
func (this *UseItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UseItem)
	if !ok {
		that2, ok := that.(UseItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ItemId != that1.ItemId {
		return false
	}
	return true
}
func (this *FighterSnapInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FighterSnapInfo)
	if !ok {
		that2, ok := that.(FighterSnapInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Vel.Equal(that1.Vel) {
		return false
	}
	return true
}
func (this *Snap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Snap)
	if !ok {
		that2, ok := that.(Snap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Infos) != len(that1.Infos) {
		return false
	}
	for i := range this.Infos {
		if !this.Infos[i].Equal(that1.Infos[i]) {
			return false
		}
	}
	return true
}
func (this *FighterInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FighterInfo)
	if !ok {
		that2, ok := that.(FighterInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Vel.Equal(that1.Vel) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Hp != that1.Hp {
		return false
	}
	return true
}
func (this *BattleStart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BattleStart)
	if !ok {
		that2, ok := that.(BattleStart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Self.Equal(that1.Self) {
		return false
	}
	if len(this.Fighters) != len(that1.Fighters) {
		return false
	}
	for i := range this.Fighters {
		if !this.Fighters[i].Equal(that1.Fighters[i]) {
			return false
		}
	}
	return true
}
func (this *NewStage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewStage)
	if !ok {
		that2, ok := that.(NewStage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Stage != that1.Stage {
		return false
	}
	if len(this.Fighters) != len(that1.Fighters) {
		return false
	}
	for i := range this.Fighters {
		if !this.Fighters[i].Equal(that1.Fighters[i]) {
			return false
		}
	}
	return true
}
func (this *GameOver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameOver)
	if !ok {
		that2, ok := that.(GameOver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Winner != that1.Winner {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Stage != that1.Stage {
		return false
	}
	if this.Kill != that1.Kill {
		return false
	}
	return true
}
func (this *Hit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hit)
	if !ok {
		that2, ok := that.(Hit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BulletId != that1.BulletId {
		return false
	}
	if this.TargetId != that1.TargetId {
		return false
	}
	if this.LoseHP != that1.LoseHP {
		return false
	}
	return true
}
func (this *AddHP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddHP)
	if !ok {
		that2, ok := that.(AddHP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Add != that1.Add {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Dead) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dead)
	if !ok {
		that2, ok := that.(Dead)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.EnemyId != that1.EnemyId {
		return false
	}
	return true
}
func (this *AddEntity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddEntity)
	if !ok {
		that2, ok := that.(AddEntity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Pos.Equal(that1.Pos) {
		return false
	}
	if !this.Vel.Equal(that1.Vel) {
		return false
	}
	if this.Etype != that1.Etype {
		return false
	}
	return true
}
func (this *RemoveEntity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveEntity)
	if !ok {
		that2, ok := that.(RemoveEntity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Etype != that1.Etype {
		return false
	}
	return true
}
func (this *C2S_PrivateChatMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.C2S_PrivateChatMsg{")
	s = append(s, "TargetName: "+fmt.Sprintf("%#v", this.TargetName)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S2C_PrivateChatMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gameproto.S2C_PrivateChatMsg{")
	s = append(s, "TargetName: "+fmt.Sprintf("%#v", this.TargetName)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S2C_PrivateOtherChatMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.S2C_PrivateOtherChatMsg{")
	s = append(s, "SendName: "+fmt.Sprintf("%#v", this.SendName)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C2S_WorldChatMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gameproto.C2S_WorldChatMsg{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S2C_WorldChatMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.S2C_WorldChatMsg{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S_ReviseUserInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.S_ReviseUserInfo{")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "HeadId: "+fmt.Sprintf("%#v", this.HeadId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C_Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.C_Response{")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C_UpateAttr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.C_UpateAttr{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Val: "+fmt.Sprintf("%#v", this.Val)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S_RequestBattle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.S_RequestBattle{")
	s = append(s, "StageId: "+fmt.Sprintf("%#v", this.StageId)+",\n")
	s = append(s, "BattleType: "+fmt.Sprintf("%#v", this.BattleType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C_RequestBattle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gameproto.C_RequestBattle{")
	s = append(s, "StageId: "+fmt.Sprintf("%#v", this.StageId)+",\n")
	s = append(s, "BattleType: "+fmt.Sprintf("%#v", this.BattleType)+",\n")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C_StartBattle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gameproto.C_StartBattle{")
	s = append(s, "StageId: "+fmt.Sprintf("%#v", this.StageId)+",\n")
	s = append(s, "BattleType: "+fmt.Sprintf("%#v", this.BattleType)+",\n")
	s = append(s, "RoomId: "+fmt.Sprintf("%#v", this.RoomId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *C_Balance) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gameproto.C_Balance{")
	s = append(s, "StageId: "+fmt.Sprintf("%#v", this.StageId)+",\n")
	s = append(s, "BattleType: "+fmt.Sprintf("%#v", this.BattleType)+",\n")
	if this.Awards != nil {
		s = append(s, "Awards: "+fmt.Sprintf("%#v", this.Awards)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Award) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.Award{")
	s = append(s, "AType: "+fmt.Sprintf("%#v", this.AType)+",\n")
	s = append(s, "AVal: "+fmt.Sprintf("%#v", this.AVal)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FVector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.FVector{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Move) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gameproto.Move{")
	s = append(s, "Angle: "+fmt.Sprintf("%#v", this.Angle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Shot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gameproto.Shot{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "BulletId: "+fmt.Sprintf("%#v", this.BulletId)+",\n")
	if this.Pos != nil {
		s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	}
	s = append(s, "Angel: "+fmt.Sprintf("%#v", this.Angel)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UseItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gameproto.UseItem{")
	s = append(s, "ItemId: "+fmt.Sprintf("%#v", this.ItemId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FighterSnapInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gameproto.FighterSnapInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Pos != nil {
		s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	}
	if this.Vel != nil {
		s = append(s, "Vel: "+fmt.Sprintf("%#v", this.Vel)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Snap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gameproto.Snap{")
	if this.Infos != nil {
		s = append(s, "Infos: "+fmt.Sprintf("%#v", this.Infos)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FighterInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&gameproto.FighterInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Pos != nil {
		s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	}
	if this.Vel != nil {
		s = append(s, "Vel: "+fmt.Sprintf("%#v", this.Vel)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Hp: "+fmt.Sprintf("%#v", this.Hp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BattleStart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.BattleStart{")
	if this.Self != nil {
		s = append(s, "Self: "+fmt.Sprintf("%#v", this.Self)+",\n")
	}
	if this.Fighters != nil {
		s = append(s, "Fighters: "+fmt.Sprintf("%#v", this.Fighters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewStage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.NewStage{")
	s = append(s, "Stage: "+fmt.Sprintf("%#v", this.Stage)+",\n")
	if this.Fighters != nil {
		s = append(s, "Fighters: "+fmt.Sprintf("%#v", this.Fighters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameOver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gameproto.GameOver{")
	s = append(s, "Winner: "+fmt.Sprintf("%#v", this.Winner)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Stage: "+fmt.Sprintf("%#v", this.Stage)+",\n")
	s = append(s, "Kill: "+fmt.Sprintf("%#v", this.Kill)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Hit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gameproto.Hit{")
	s = append(s, "BulletId: "+fmt.Sprintf("%#v", this.BulletId)+",\n")
	s = append(s, "TargetId: "+fmt.Sprintf("%#v", this.TargetId)+",\n")
	s = append(s, "LoseHP: "+fmt.Sprintf("%#v", this.LoseHP)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddHP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.AddHP{")
	s = append(s, "Add: "+fmt.Sprintf("%#v", this.Add)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dead) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.Dead{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "EnemyId: "+fmt.Sprintf("%#v", this.EnemyId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddEntity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gameproto.AddEntity{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Pos != nil {
		s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	}
	if this.Vel != nil {
		s = append(s, "Vel: "+fmt.Sprintf("%#v", this.Vel)+",\n")
	}
	s = append(s, "Etype: "+fmt.Sprintf("%#v", this.Etype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveEntity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gameproto.RemoveEntity{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Etype: "+fmt.Sprintf("%#v", this.Etype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGamemsg(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *C2S_PrivateChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_PrivateChatMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_PrivateChatMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TargetName) > 0 {
		i -= len(m.TargetName)
		copy(dAtA[i:], m.TargetName)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.TargetName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PrivateChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PrivateChatMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PrivateChatMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TargetName) > 0 {
		i -= len(m.TargetName)
		copy(dAtA[i:], m.TargetName)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.TargetName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_PrivateOtherChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_PrivateOtherChatMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_PrivateOtherChatMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SendName) > 0 {
		i -= len(m.SendName)
		copy(dAtA[i:], m.SendName)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.SendName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C2S_WorldChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_WorldChatMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_WorldChatMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_WorldChatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_WorldChatMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_WorldChatMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S_ReviseUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S_ReviseUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S_ReviseUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HeadId != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.HeadId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *C_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErrCode != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.ErrCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C_UpateAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_UpateAttr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C_UpateAttr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Val != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Val))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S_RequestBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S_RequestBattle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S_RequestBattle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleType != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.BattleType))
		i--
		dAtA[i] = 0x10
	}
	if m.StageId != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.StageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C_RequestBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_RequestBattle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C_RequestBattle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.ErrCode))
		i--
		dAtA[i] = 0x18
	}
	if m.BattleType != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.BattleType))
		i--
		dAtA[i] = 0x10
	}
	if m.StageId != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.StageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C_StartBattle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_StartBattle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C_StartBattle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoomId) > 0 {
		i -= len(m.RoomId)
		copy(dAtA[i:], m.RoomId)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.RoomId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BattleType != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.BattleType))
		i--
		dAtA[i] = 0x10
	}
	if m.StageId != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.StageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C_Balance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C_Balance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C_Balance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Awards) > 0 {
		for iNdEx := len(m.Awards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Awards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGamemsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BattleType != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.BattleType))
		i--
		dAtA[i] = 0x10
	}
	if m.StageId != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.StageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Award) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Award) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Award) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AVal != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.AVal))
		i--
		dAtA[i] = 0x10
	}
	if m.AType != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.AType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FVector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FVector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FVector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Y))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *Move) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Move) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Move) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Angle != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Angle))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *Shot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Shot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Angel != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Angel))))
		i--
		dAtA[i] = 0x25
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGamemsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BulletId != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.BulletId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UseItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FighterSnapInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FighterSnapInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FighterSnapInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vel != nil {
		{
			size, err := m.Vel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGamemsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGamemsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Snap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGamemsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FighterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FighterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FighterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hp != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Hp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGamemsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Vel != nil {
		{
			size, err := m.Vel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGamemsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGamemsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fighters) > 0 {
		for iNdEx := len(m.Fighters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fighters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGamemsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Self != nil {
		{
			size, err := m.Self.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGamemsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fighters) > 0 {
		for iNdEx := len(m.Fighters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fighters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGamemsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Stage != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameOver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameOver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameOver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kill != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Kill))
		i--
		dAtA[i] = 0x20
	}
	if m.Stage != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x18
	}
	if m.Time != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Winner != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Winner))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Hit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoseHP != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.LoseHP))
		i--
		dAtA[i] = 0x18
	}
	if m.TargetId != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.TargetId))
		i--
		dAtA[i] = 0x10
	}
	if m.BulletId != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.BulletId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddHP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddHP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddHP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Add != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Add))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Dead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnemyId != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.EnemyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEntity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddEntity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Etype != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Etype))
		i--
		dAtA[i] = 0x20
	}
	if m.Vel != nil {
		{
			size, err := m.Vel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGamemsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGamemsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveEntity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveEntity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Etype != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Etype))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGamemsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGamemsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovGamemsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *C2S_PrivateChatMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetName)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *S2C_PrivateChatMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetName)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovGamemsg(uint64(m.Result))
	}
	return n
}

func (m *S2C_PrivateOtherChatMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SendName)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *C2S_WorldChatMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *S2C_WorldChatMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *S_ReviseUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.HeadId != 0 {
		n += 1 + sovGamemsg(uint64(m.HeadId))
	}
	return n
}

func (m *C_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovGamemsg(uint64(m.ErrCode))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *C_UpateAttr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Val != 0 {
		n += 1 + sovGamemsg(uint64(m.Val))
	}
	return n
}

func (m *S_RequestBattle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovGamemsg(uint64(m.StageId))
	}
	if m.BattleType != 0 {
		n += 1 + sovGamemsg(uint64(m.BattleType))
	}
	return n
}

func (m *C_RequestBattle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovGamemsg(uint64(m.StageId))
	}
	if m.BattleType != 0 {
		n += 1 + sovGamemsg(uint64(m.BattleType))
	}
	if m.ErrCode != 0 {
		n += 1 + sovGamemsg(uint64(m.ErrCode))
	}
	return n
}

func (m *C_StartBattle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovGamemsg(uint64(m.StageId))
	}
	if m.BattleType != 0 {
		n += 1 + sovGamemsg(uint64(m.BattleType))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *C_Balance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovGamemsg(uint64(m.StageId))
	}
	if m.BattleType != 0 {
		n += 1 + sovGamemsg(uint64(m.BattleType))
	}
	if len(m.Awards) > 0 {
		for _, e := range m.Awards {
			l = e.Size()
			n += 1 + l + sovGamemsg(uint64(l))
		}
	}
	return n
}

func (m *Award) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AType != 0 {
		n += 1 + sovGamemsg(uint64(m.AType))
	}
	if m.AVal != 0 {
		n += 1 + sovGamemsg(uint64(m.AVal))
	}
	return n
}

func (m *FVector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	return n
}

func (m *Move) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Angle != 0 {
		n += 5
	}
	return n
}

func (m *Shot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	if m.BulletId != 0 {
		n += 1 + sovGamemsg(uint64(m.BulletId))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Angel != 0 {
		n += 5
	}
	return n
}

func (m *UseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovGamemsg(uint64(m.ItemId))
	}
	return n
}

func (m *FighterSnapInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Vel != nil {
		l = m.Vel.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	return n
}

func (m *Snap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovGamemsg(uint64(l))
		}
	}
	return n
}

func (m *FighterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Vel != nil {
		l = m.Vel.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Hp != 0 {
		n += 1 + sovGamemsg(uint64(m.Hp))
	}
	return n
}

func (m *BattleStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if len(m.Fighters) > 0 {
		for _, e := range m.Fighters {
			l = e.Size()
			n += 1 + l + sovGamemsg(uint64(l))
		}
	}
	return n
}

func (m *NewStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stage != 0 {
		n += 1 + sovGamemsg(uint64(m.Stage))
	}
	if len(m.Fighters) > 0 {
		for _, e := range m.Fighters {
			l = e.Size()
			n += 1 + l + sovGamemsg(uint64(l))
		}
	}
	return n
}

func (m *GameOver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Winner != 0 {
		n += 1 + sovGamemsg(uint64(m.Winner))
	}
	if m.Time != 0 {
		n += 1 + sovGamemsg(uint64(m.Time))
	}
	if m.Stage != 0 {
		n += 1 + sovGamemsg(uint64(m.Stage))
	}
	if m.Kill != 0 {
		n += 1 + sovGamemsg(uint64(m.Kill))
	}
	return n
}

func (m *Hit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BulletId != 0 {
		n += 1 + sovGamemsg(uint64(m.BulletId))
	}
	if m.TargetId != 0 {
		n += 1 + sovGamemsg(uint64(m.TargetId))
	}
	if m.LoseHP != 0 {
		n += 1 + sovGamemsg(uint64(m.LoseHP))
	}
	return n
}

func (m *AddHP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Add != 0 {
		n += 1 + sovGamemsg(uint64(m.Add))
	}
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	return n
}

func (m *Dead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	if m.EnemyId != 0 {
		n += 1 + sovGamemsg(uint64(m.EnemyId))
	}
	return n
}

func (m *AddEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Vel != nil {
		l = m.Vel.Size()
		n += 1 + l + sovGamemsg(uint64(l))
	}
	if m.Etype != 0 {
		n += 1 + sovGamemsg(uint64(m.Etype))
	}
	return n
}

func (m *RemoveEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGamemsg(uint64(m.Id))
	}
	if m.Etype != 0 {
		n += 1 + sovGamemsg(uint64(m.Etype))
	}
	return n
}

func sovGamemsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGamemsg(x uint64) (n int) {
	return sovGamemsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *C2S_PrivateChatMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2S_PrivateChatMsg{`,
		`TargetName:` + fmt.Sprintf("%v", this.TargetName) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S2C_PrivateChatMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S2C_PrivateChatMsg{`,
		`TargetName:` + fmt.Sprintf("%v", this.TargetName) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S2C_PrivateOtherChatMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S2C_PrivateOtherChatMsg{`,
		`SendName:` + fmt.Sprintf("%v", this.SendName) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C2S_WorldChatMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C2S_WorldChatMsg{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S2C_WorldChatMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S2C_WorldChatMsg{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S_ReviseUserInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S_ReviseUserInfo{`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`HeadId:` + fmt.Sprintf("%v", this.HeadId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C_Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C_Response{`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C_UpateAttr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C_UpateAttr{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Val:` + fmt.Sprintf("%v", this.Val) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S_RequestBattle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S_RequestBattle{`,
		`StageId:` + fmt.Sprintf("%v", this.StageId) + `,`,
		`BattleType:` + fmt.Sprintf("%v", this.BattleType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C_RequestBattle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C_RequestBattle{`,
		`StageId:` + fmt.Sprintf("%v", this.StageId) + `,`,
		`BattleType:` + fmt.Sprintf("%v", this.BattleType) + `,`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C_StartBattle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&C_StartBattle{`,
		`StageId:` + fmt.Sprintf("%v", this.StageId) + `,`,
		`BattleType:` + fmt.Sprintf("%v", this.BattleType) + `,`,
		`RoomId:` + fmt.Sprintf("%v", this.RoomId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *C_Balance) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAwards := "[]*Award{"
	for _, f := range this.Awards {
		repeatedStringForAwards += strings.Replace(f.String(), "Award", "Award", 1) + ","
	}
	repeatedStringForAwards += "}"
	s := strings.Join([]string{`&C_Balance{`,
		`StageId:` + fmt.Sprintf("%v", this.StageId) + `,`,
		`BattleType:` + fmt.Sprintf("%v", this.BattleType) + `,`,
		`Awards:` + repeatedStringForAwards + `,`,
		`}`,
	}, "")
	return s
}
func (this *Award) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Award{`,
		`AType:` + fmt.Sprintf("%v", this.AType) + `,`,
		`AVal:` + fmt.Sprintf("%v", this.AVal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FVector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FVector{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Move) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Move{`,
		`Angle:` + fmt.Sprintf("%v", this.Angle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Shot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Shot{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`BulletId:` + fmt.Sprintf("%v", this.BulletId) + `,`,
		`Pos:` + strings.Replace(this.Pos.String(), "FVector", "FVector", 1) + `,`,
		`Angel:` + fmt.Sprintf("%v", this.Angel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UseItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UseItem{`,
		`ItemId:` + fmt.Sprintf("%v", this.ItemId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FighterSnapInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FighterSnapInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Pos:` + strings.Replace(this.Pos.String(), "FVector", "FVector", 1) + `,`,
		`Vel:` + strings.Replace(this.Vel.String(), "FVector", "FVector", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Snap) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInfos := "[]*FighterSnapInfo{"
	for _, f := range this.Infos {
		repeatedStringForInfos += strings.Replace(f.String(), "FighterSnapInfo", "FighterSnapInfo", 1) + ","
	}
	repeatedStringForInfos += "}"
	s := strings.Join([]string{`&Snap{`,
		`Infos:` + repeatedStringForInfos + `,`,
		`}`,
	}, "")
	return s
}
func (this *FighterInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FighterInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Pos:` + strings.Replace(this.Pos.String(), "FVector", "FVector", 1) + `,`,
		`Vel:` + strings.Replace(this.Vel.String(), "FVector", "FVector", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Hp:` + fmt.Sprintf("%v", this.Hp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BattleStart) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFighters := "[]*FighterInfo{"
	for _, f := range this.Fighters {
		repeatedStringForFighters += strings.Replace(f.String(), "FighterInfo", "FighterInfo", 1) + ","
	}
	repeatedStringForFighters += "}"
	s := strings.Join([]string{`&BattleStart{`,
		`Self:` + strings.Replace(this.Self.String(), "FighterInfo", "FighterInfo", 1) + `,`,
		`Fighters:` + repeatedStringForFighters + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewStage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFighters := "[]*FighterInfo{"
	for _, f := range this.Fighters {
		repeatedStringForFighters += strings.Replace(f.String(), "FighterInfo", "FighterInfo", 1) + ","
	}
	repeatedStringForFighters += "}"
	s := strings.Join([]string{`&NewStage{`,
		`Stage:` + fmt.Sprintf("%v", this.Stage) + `,`,
		`Fighters:` + repeatedStringForFighters + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameOver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameOver{`,
		`Winner:` + fmt.Sprintf("%v", this.Winner) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Stage:` + fmt.Sprintf("%v", this.Stage) + `,`,
		`Kill:` + fmt.Sprintf("%v", this.Kill) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Hit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Hit{`,
		`BulletId:` + fmt.Sprintf("%v", this.BulletId) + `,`,
		`TargetId:` + fmt.Sprintf("%v", this.TargetId) + `,`,
		`LoseHP:` + fmt.Sprintf("%v", this.LoseHP) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddHP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddHP{`,
		`Add:` + fmt.Sprintf("%v", this.Add) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dead) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Dead{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`EnemyId:` + fmt.Sprintf("%v", this.EnemyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddEntity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddEntity{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Pos:` + strings.Replace(this.Pos.String(), "FVector", "FVector", 1) + `,`,
		`Vel:` + strings.Replace(this.Vel.String(), "FVector", "FVector", 1) + `,`,
		`Etype:` + fmt.Sprintf("%v", this.Etype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveEntity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveEntity{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Etype:` + fmt.Sprintf("%v", this.Etype) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGamemsg(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *C2S_PrivateChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_PrivateChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_PrivateChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PrivateChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PrivateChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PrivateChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_PrivateOtherChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_PrivateOtherChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_PrivateOtherChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_WorldChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_WorldChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_WorldChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_WorldChatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_WorldChatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_WorldChatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S_ReviseUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S_ReviseUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S_ReviseUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadId", wireType)
			}
			m.HeadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_UpateAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_UpateAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_UpateAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S_RequestBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S_RequestBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S_RequestBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleType", wireType)
			}
			m.BattleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_RequestBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_RequestBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_RequestBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleType", wireType)
			}
			m.BattleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_StartBattle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_StartBattle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_StartBattle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleType", wireType)
			}
			m.BattleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C_Balance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C_Balance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C_Balance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleType", wireType)
			}
			m.BattleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Awards = append(m.Awards, &Award{})
			if err := m.Awards[len(m.Awards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Award) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Award: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Award: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AType", wireType)
			}
			m.AType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVal", wireType)
			}
			m.AVal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AVal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FVector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FVector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FVector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Y = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Move) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Move: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Move: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Angle", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Angle = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BulletId", wireType)
			}
			m.BulletId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BulletId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &FVector{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Angel", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Angel = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FighterSnapInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FighterSnapInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FighterSnapInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &FVector{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vel == nil {
				m.Vel = &FVector{}
			}
			if err := m.Vel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &FighterSnapInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FighterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FighterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FighterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &FVector{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vel == nil {
				m.Vel = &FVector{}
			}
			if err := m.Vel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &FighterInfo{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fighters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fighters = append(m.Fighters, &FighterInfo{})
			if err := m.Fighters[len(m.Fighters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fighters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fighters = append(m.Fighters, &FighterInfo{})
			if err := m.Fighters[len(m.Fighters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameOver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameOver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameOver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			m.Winner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Winner |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kill", wireType)
			}
			m.Kill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kill |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BulletId", wireType)
			}
			m.BulletId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BulletId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseHP", wireType)
			}
			m.LoseHP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoseHP |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddHP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddHP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddHP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			m.Add = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Add |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyId", wireType)
			}
			m.EnemyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnemyId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &FVector{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGamemsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGamemsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vel == nil {
				m.Vel = &FVector{}
			}
			if err := m.Vel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etype", wireType)
			}
			m.Etype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etype |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etype", wireType)
			}
			m.Etype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etype |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGamemsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGamemsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGamemsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGamemsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGamemsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGamemsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGamemsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGamemsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGamemsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGamemsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGamemsg = fmt.Errorf("proto: unexpected end of group")
)
