// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: login.proto

package gameproto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlatformUser_PlatformType int32

const (
	Engine PlatformUser_PlatformType = 0
	DEVICE PlatformUser_PlatformType = 99
)

var PlatformUser_PlatformType_name = map[int32]string{
	0:  "Engine",
	99: "DEVICE",
}

var PlatformUser_PlatformType_value = map[string]int32{
	"Engine": 0,
	"DEVICE": 99,
}

func (PlatformUser_PlatformType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{1, 0}
}

//http登录结果
type UserLoginResult struct {
	Uid         uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GateTcpAddr string `protobuf:"bytes,2,opt,name=gateTcpAddr,proto3" json:"gateTcpAddr,omitempty"`
	GateWsAddr  string `protobuf:"bytes,3,opt,name=gateWsAddr,proto3" json:"gateWsAddr,omitempty"`
	Key         string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Result      int32  `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UserLoginResult) Reset()      { *m = UserLoginResult{} }
func (*UserLoginResult) ProtoMessage() {}
func (*UserLoginResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{0}
}
func (m *UserLoginResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLoginResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLoginResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserLoginResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoginResult.Merge(m, src)
}
func (m *UserLoginResult) XXX_Size() int {
	return m.Size()
}
func (m *UserLoginResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoginResult.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoginResult proto.InternalMessageInfo

func (m *UserLoginResult) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserLoginResult) GetGateTcpAddr() string {
	if m != nil {
		return m.GateTcpAddr
	}
	return ""
}

func (m *UserLoginResult) GetGateWsAddr() string {
	if m != nil {
		return m.GateWsAddr
	}
	return ""
}

func (m *UserLoginResult) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UserLoginResult) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type PlatformUser struct {
	PlatformId      string                    `protobuf:"bytes,1,opt,name=platformId,proto3" json:"platformId,omitempty"`
	Platform        PlatformUser_PlatformType `protobuf:"varint,2,opt,name=platform,proto3,enum=gameproto.PlatformUser_PlatformType" json:"platform,omitempty"`
	PlatformSession string                    `protobuf:"bytes,3,opt,name=platformSession,proto3" json:"platformSession,omitempty"`
	PlatformUid     int32                     `protobuf:"varint,4,opt,name=platformUid,proto3" json:"platformUid,omitempty"`
	ServerID        int32                     `protobuf:"varint,5,opt,name=serverID,proto3" json:"serverID,omitempty"`
	ChannelId       string                    `protobuf:"bytes,6,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Version         int32                     `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	Key             string                    `protobuf:"bytes,8,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *PlatformUser) Reset()      { *m = PlatformUser{} }
func (*PlatformUser) ProtoMessage() {}
func (*PlatformUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{1}
}
func (m *PlatformUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlatformUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlatformUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlatformUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlatformUser.Merge(m, src)
}
func (m *PlatformUser) XXX_Size() int {
	return m.Size()
}
func (m *PlatformUser) XXX_DiscardUnknown() {
	xxx_messageInfo_PlatformUser.DiscardUnknown(m)
}

var xxx_messageInfo_PlatformUser proto.InternalMessageInfo

func (m *PlatformUser) GetPlatformId() string {
	if m != nil {
		return m.PlatformId
	}
	return ""
}

func (m *PlatformUser) GetPlatform() PlatformUser_PlatformType {
	if m != nil {
		return m.Platform
	}
	return Engine
}

func (m *PlatformUser) GetPlatformSession() string {
	if m != nil {
		return m.PlatformSession
	}
	return ""
}

func (m *PlatformUser) GetPlatformUid() int32 {
	if m != nil {
		return m.PlatformUid
	}
	return 0
}

func (m *PlatformUser) GetServerID() int32 {
	if m != nil {
		return m.ServerID
	}
	return 0
}

func (m *PlatformUser) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *PlatformUser) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PlatformUser) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type LoginReturn struct {
	ErrCode    int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ServerTime int32  `protobuf:"varint,2,opt,name=serverTime,proto3" json:"serverTime,omitempty"`
	Args       string `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
	BFirst     int32  `protobuf:"varint,4,opt,name=bFirst,proto3" json:"bFirst,omitempty"`
}

func (m *LoginReturn) Reset()      { *m = LoginReturn{} }
func (*LoginReturn) ProtoMessage() {}
func (*LoginReturn) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{2}
}
func (m *LoginReturn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginReturn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginReturn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginReturn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReturn.Merge(m, src)
}
func (m *LoginReturn) XXX_Size() int {
	return m.Size()
}
func (m *LoginReturn) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReturn.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReturn proto.InternalMessageInfo

func (m *LoginReturn) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *LoginReturn) GetServerTime() int32 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *LoginReturn) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *LoginReturn) GetBFirst() int32 {
	if m != nil {
		return m.BFirst
	}
	return 0
}

type LoginInfo struct {
	HeadId   int32  `protobuf:"varint,1,opt,name=headId,proto3" json:"headId,omitempty"`
	Level    int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Exp      int64  `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	Nickname string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Sex      int32  `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`
	Id       int64  `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	Gold     int32  `protobuf:"varint,7,opt,name=gold,proto3" json:"gold,omitempty"`
	Diamond  int32  `protobuf:"varint,8,opt,name=diamond,proto3" json:"diamond,omitempty"`
}

func (m *LoginInfo) Reset()      { *m = LoginInfo{} }
func (*LoginInfo) ProtoMessage() {}
func (*LoginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{3}
}
func (m *LoginInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginInfo.Merge(m, src)
}
func (m *LoginInfo) XXX_Size() int {
	return m.Size()
}
func (m *LoginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LoginInfo proto.InternalMessageInfo

func (m *LoginInfo) GetHeadId() int32 {
	if m != nil {
		return m.HeadId
	}
	return 0
}

func (m *LoginInfo) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *LoginInfo) GetExp() int64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *LoginInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *LoginInfo) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *LoginInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LoginInfo) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *LoginInfo) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func init() {
	proto.RegisterEnum("gameproto.PlatformUser_PlatformType", PlatformUser_PlatformType_name, PlatformUser_PlatformType_value)
	proto.RegisterType((*UserLoginResult)(nil), "gameproto.UserLoginResult")
	proto.RegisterType((*PlatformUser)(nil), "gameproto.PlatformUser")
	proto.RegisterType((*LoginReturn)(nil), "gameproto.LoginReturn")
	proto.RegisterType((*LoginInfo)(nil), "gameproto.LoginInfo")
}

func init() { proto.RegisterFile("login.proto", fileDescriptor_67c21677aa7f4e4f) }

var fileDescriptor_67c21677aa7f4e4f = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x41, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x3d, 0x49, 0x9d, 0x26, 0x13, 0x68, 0xa3, 0x11, 0x42, 0x16, 0x42, 0xa3, 0x28, 0x42,
	0x28, 0xab, 0x2c, 0x80, 0x03, 0x00, 0x6d, 0x90, 0x22, 0xb1, 0x40, 0x43, 0x0a, 0x6b, 0x37, 0xf3,
	0xea, 0x8e, 0xea, 0x8c, 0xad, 0x19, 0x27, 0x6a, 0x77, 0xdc, 0x00, 0x8e, 0xc1, 0x0d, 0xb8, 0x02,
	0x62, 0x95, 0x65, 0x97, 0xc4, 0xd9, 0xb0, 0xec, 0x11, 0xd0, 0x9b, 0x8c, 0x5d, 0xab, 0xbb, 0xff,
	0xff, 0xfd, 0x3c, 0xef, 0xbd, 0x6f, 0x86, 0xf6, 0xd3, 0x2c, 0x51, 0x7a, 0x92, 0x9b, 0xac, 0xc8,
	0x58, 0x2f, 0x89, 0x97, 0xe0, 0xe4, 0xe8, 0x3b, 0xa1, 0xc7, 0x67, 0x16, 0xcc, 0x47, 0xfc, 0x2c,
	0xc0, 0xae, 0xd2, 0x82, 0x0d, 0x68, 0x7b, 0xa5, 0x64, 0x44, 0x86, 0x64, 0xfc, 0x58, 0xa0, 0x64,
	0x43, 0xda, 0x4f, 0xe2, 0x02, 0xe6, 0x8b, 0xfc, 0x9d, 0x94, 0x26, 0x6a, 0x0d, 0xc9, 0xb8, 0x27,
	0x9a, 0x11, 0xe3, 0x94, 0xa2, 0xfd, 0x6a, 0x5d, 0x41, 0xdb, 0x15, 0x34, 0x12, 0x3c, 0xf3, 0x0a,
	0x6e, 0xa2, 0x03, 0xf7, 0x01, 0x25, 0x7b, 0x4a, 0x3b, 0xc6, 0xf5, 0x8b, 0xc2, 0x21, 0x19, 0x87,
	0xc2, 0xbb, 0xd1, 0x9f, 0x16, 0x7d, 0xf4, 0x29, 0x8d, 0x8b, 0x8b, 0xcc, 0x2c, 0x71, 0x32, 0x3c,
	0x3a, 0xf7, 0x7e, 0xb6, 0x9f, 0xaa, 0x27, 0x1a, 0x09, 0x7b, 0x4b, 0xbb, 0x95, 0x73, 0x93, 0x1d,
	0xbd, 0x7a, 0x31, 0xa9, 0x17, 0x9c, 0x34, 0x8f, 0xaa, 0xcd, 0xfc, 0x26, 0x07, 0x51, 0xff, 0xc5,
	0xc6, 0xf4, 0xb8, 0xd2, 0x9f, 0xc1, 0x5a, 0x95, 0x69, 0xbf, 0xc1, 0xc3, 0x18, 0x41, 0x54, 0xd1,
	0x99, 0x92, 0x6e, 0x9d, 0x50, 0x34, 0x23, 0xf6, 0x8c, 0x76, 0x2d, 0x98, 0x35, 0x98, 0xd9, 0xa9,
	0x5f, 0xac, 0xf6, 0xec, 0x39, 0xed, 0x2d, 0x2e, 0x63, 0xad, 0x21, 0x9d, 0xc9, 0xa8, 0xe3, 0x3a,
	0xdc, 0x07, 0x2c, 0xa2, 0x87, 0x6b, 0x30, 0xae, 0xfb, 0xa1, 0xfb, 0xb1, 0xb2, 0x15, 0xbc, 0x6e,
	0x0d, 0x6f, 0xf4, 0xf2, 0x9e, 0x11, 0xee, 0xc2, 0x28, 0xed, 0x4c, 0x75, 0xa2, 0x34, 0x0c, 0x02,
	0xd4, 0xa7, 0xd3, 0x2f, 0xb3, 0x93, 0xe9, 0x60, 0x31, 0xb2, 0xb4, 0xef, 0x6f, 0xb6, 0x58, 0x19,
	0x8d, 0x2d, 0xc0, 0x98, 0x93, 0x4c, 0x82, 0xe3, 0x18, 0x8a, 0xca, 0x22, 0xe4, 0xfd, 0x98, 0x73,
	0xb5, 0x04, 0x87, 0x31, 0x14, 0x8d, 0x84, 0x31, 0x7a, 0x10, 0x9b, 0xc4, 0x7a, 0x2e, 0x4e, 0xe3,
	0x0d, 0x9e, 0x7f, 0x50, 0xc6, 0x16, 0x9e, 0x83, 0x77, 0xa3, 0x5f, 0x84, 0xf6, 0x5c, 0xd7, 0x99,
	0xbe, 0xc8, 0xb0, 0xea, 0x12, 0x62, 0xe9, 0xaf, 0x2e, 0x14, 0xde, 0xb1, 0x27, 0x34, 0x4c, 0x61,
	0x0d, 0xa9, 0x6f, 0xb6, 0x37, 0xb8, 0x2a, 0x5c, 0xe7, 0xae, 0x4d, 0x5b, 0xa0, 0x44, 0xa0, 0x5a,
	0x2d, 0xae, 0x74, 0xbc, 0x04, 0xff, 0x7c, 0x6a, 0x8f, 0xd5, 0x16, 0xae, 0x3d, 0x67, 0x94, 0xec,
	0x88, 0xb6, 0xd4, 0x9e, 0x6d, 0x5b, 0xb4, 0x94, 0xc4, 0xb9, 0x93, 0x2c, 0x95, 0x9e, 0xa8, 0xd3,
	0x48, 0x41, 0xaa, 0x78, 0x99, 0x69, 0xe9, 0x90, 0x86, 0xa2, 0xb2, 0xef, 0xdf, 0x6c, 0xb6, 0x3c,
	0xb8, 0xdd, 0xf2, 0xe0, 0x6e, 0xcb, 0xc9, 0xb7, 0x92, 0x93, 0x9f, 0x25, 0x27, 0xbf, 0x4b, 0x4e,
	0x36, 0x25, 0x27, 0x7f, 0x4b, 0x4e, 0xfe, 0x95, 0x3c, 0xb8, 0x2b, 0x39, 0xf9, 0xb1, 0xe3, 0xc1,
	0x66, 0xc7, 0x83, 0xdb, 0x1d, 0x0f, 0xce, 0x3b, 0xee, 0xa5, 0xbd, 0xfe, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0xc8, 0x50, 0x5b, 0x72, 0x64, 0x03, 0x00, 0x00,
}

func (x PlatformUser_PlatformType) String() string {
	s, ok := PlatformUser_PlatformType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UserLoginResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserLoginResult)
	if !ok {
		that2, ok := that.(UserLoginResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.GateTcpAddr != that1.GateTcpAddr {
		return false
	}
	if this.GateWsAddr != that1.GateWsAddr {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *PlatformUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlatformUser)
	if !ok {
		that2, ok := that.(PlatformUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PlatformId != that1.PlatformId {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.PlatformSession != that1.PlatformSession {
		return false
	}
	if this.PlatformUid != that1.PlatformUid {
		return false
	}
	if this.ServerID != that1.ServerID {
		return false
	}
	if this.ChannelId != that1.ChannelId {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *LoginReturn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginReturn)
	if !ok {
		that2, ok := that.(LoginReturn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrCode != that1.ErrCode {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.Args != that1.Args {
		return false
	}
	if this.BFirst != that1.BFirst {
		return false
	}
	return true
}
func (this *LoginInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginInfo)
	if !ok {
		that2, ok := that.(LoginInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HeadId != that1.HeadId {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Exp != that1.Exp {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Gold != that1.Gold {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	return true
}
func (this *UserLoginResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&gameproto.UserLoginResult{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "GateTcpAddr: "+fmt.Sprintf("%#v", this.GateTcpAddr)+",\n")
	s = append(s, "GateWsAddr: "+fmt.Sprintf("%#v", this.GateWsAddr)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlatformUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&gameproto.PlatformUser{")
	s = append(s, "PlatformId: "+fmt.Sprintf("%#v", this.PlatformId)+",\n")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "PlatformSession: "+fmt.Sprintf("%#v", this.PlatformSession)+",\n")
	s = append(s, "PlatformUid: "+fmt.Sprintf("%#v", this.PlatformUid)+",\n")
	s = append(s, "ServerID: "+fmt.Sprintf("%#v", this.ServerID)+",\n")
	s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginReturn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gameproto.LoginReturn{")
	s = append(s, "ErrCode: "+fmt.Sprintf("%#v", this.ErrCode)+",\n")
	s = append(s, "ServerTime: "+fmt.Sprintf("%#v", this.ServerTime)+",\n")
	s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	s = append(s, "BFirst: "+fmt.Sprintf("%#v", this.BFirst)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&gameproto.LoginInfo{")
	s = append(s, "HeadId: "+fmt.Sprintf("%#v", this.HeadId)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Exp: "+fmt.Sprintf("%#v", this.Exp)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Gold: "+fmt.Sprintf("%#v", this.Gold)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLogin(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UserLoginResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoginResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserLoginResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GateWsAddr) > 0 {
		i -= len(m.GateWsAddr)
		copy(dAtA[i:], m.GateWsAddr)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.GateWsAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GateTcpAddr) > 0 {
		i -= len(m.GateTcpAddr)
		copy(dAtA[i:], m.GateTcpAddr)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.GateTcpAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlatformUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlatformUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlatformUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x42
	}
	if m.Version != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x32
	}
	if m.ServerID != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.ServerID))
		i--
		dAtA[i] = 0x28
	}
	if m.PlatformUid != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.PlatformUid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PlatformSession) > 0 {
		i -= len(m.PlatformSession)
		copy(dAtA[i:], m.PlatformSession)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.PlatformSession)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Platform != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Platform))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PlatformId) > 0 {
		i -= len(m.PlatformId)
		copy(dAtA[i:], m.PlatformId)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.PlatformId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginReturn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReturn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginReturn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BFirst != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.BFirst))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Args) > 0 {
		i -= len(m.Args)
		copy(dAtA[i:], m.Args)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Args)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ServerTime != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.ServerTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ErrCode != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.ErrCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoginInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Diamond != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Diamond))
		i--
		dAtA[i] = 0x40
	}
	if m.Gold != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Gold))
		i--
		dAtA[i] = 0x38
	}
	if m.Id != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x30
	}
	if m.Sex != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x22
	}
	if m.Exp != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x18
	}
	if m.Level != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.HeadId != 0 {
		i = encodeVarintLogin(dAtA, i, uint64(m.HeadId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogin(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserLoginResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovLogin(uint64(m.Uid))
	}
	l = len(m.GateTcpAddr)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.GateWsAddr)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovLogin(uint64(m.Result))
	}
	return n
}

func (m *PlatformUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlatformId)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.Platform != 0 {
		n += 1 + sovLogin(uint64(m.Platform))
	}
	l = len(m.PlatformSession)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.PlatformUid != 0 {
		n += 1 + sovLogin(uint64(m.PlatformUid))
	}
	if m.ServerID != 0 {
		n += 1 + sovLogin(uint64(m.ServerID))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovLogin(uint64(m.Version))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func (m *LoginReturn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovLogin(uint64(m.ErrCode))
	}
	if m.ServerTime != 0 {
		n += 1 + sovLogin(uint64(m.ServerTime))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.BFirst != 0 {
		n += 1 + sovLogin(uint64(m.BFirst))
	}
	return n
}

func (m *LoginInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeadId != 0 {
		n += 1 + sovLogin(uint64(m.HeadId))
	}
	if m.Level != 0 {
		n += 1 + sovLogin(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovLogin(uint64(m.Exp))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovLogin(uint64(m.Sex))
	}
	if m.Id != 0 {
		n += 1 + sovLogin(uint64(m.Id))
	}
	if m.Gold != 0 {
		n += 1 + sovLogin(uint64(m.Gold))
	}
	if m.Diamond != 0 {
		n += 1 + sovLogin(uint64(m.Diamond))
	}
	return n
}

func sovLogin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogin(x uint64) (n int) {
	return sovLogin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserLoginResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserLoginResult{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`GateTcpAddr:` + fmt.Sprintf("%v", this.GateTcpAddr) + `,`,
		`GateWsAddr:` + fmt.Sprintf("%v", this.GateWsAddr) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlatformUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlatformUser{`,
		`PlatformId:` + fmt.Sprintf("%v", this.PlatformId) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`PlatformSession:` + fmt.Sprintf("%v", this.PlatformSession) + `,`,
		`PlatformUid:` + fmt.Sprintf("%v", this.PlatformUid) + `,`,
		`ServerID:` + fmt.Sprintf("%v", this.ServerID) + `,`,
		`ChannelId:` + fmt.Sprintf("%v", this.ChannelId) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginReturn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginReturn{`,
		`ErrCode:` + fmt.Sprintf("%v", this.ErrCode) + `,`,
		`ServerTime:` + fmt.Sprintf("%v", this.ServerTime) + `,`,
		`Args:` + fmt.Sprintf("%v", this.Args) + `,`,
		`BFirst:` + fmt.Sprintf("%v", this.BFirst) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginInfo{`,
		`HeadId:` + fmt.Sprintf("%v", this.HeadId) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Exp:` + fmt.Sprintf("%v", this.Exp) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Gold:` + fmt.Sprintf("%v", this.Gold) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLogin(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserLoginResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLoginResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLoginResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateTcpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateTcpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateWsAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateWsAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlatformUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlatformUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlatformUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= PlatformUser_PlatformType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformSession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformSession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformUid", wireType)
			}
			m.PlatformUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatformUid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			m.ServerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginReturn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReturn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReturn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BFirst", wireType)
			}
			m.BFirst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BFirst |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadId", wireType)
			}
			m.HeadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogin = fmt.Errorf("proto: unexpected end of group")
)
